{% comment %}
  Montessori Collection — Fixed Infinite Scroll
{% endcomment %}

{% assign ns = section.id %}

{% style %}
  .ai-montessori-collection-{{ ns }} {
    font-family: 'Roboto', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
    max-width: {{ settings.page_width }}px;
    margin: 0 auto;
    padding: 20px 20px 50px 20px; /* 20px top, 50px bottom */
  }

  /* Breadcrumb */
  .ai-montessori-breadcrumb-{{ ns }}{ margin-bottom:20px; font-size:14px; color:#666; }
  .ai-montessori-breadcrumb-{{ ns }} a{ color:#666; text-decoration:none; }
  .ai-montessori-breadcrumb-{{ ns }} a:hover{ color:#4C4CF1; }

  /* Header */
  .ai-montessori-header-{{ ns }}{
    display:flex; justify-content:space-between; align-items:center;
    margin-bottom:30px; flex-wrap:wrap; gap:20px;
  }
  .ai-montessori-title-section-{{ ns }} h1{
    font-weight:700; color:#2D3748; font-size:{{ section.settings.title_size }}px; margin:0;
  }
  .ai-montessori-sort-dropdown-{{ ns }}{
    padding:8px 12px; border:1px solid #E2E8F0; border-radius:6px; background:#fff; font-size:14px; color:#2D3748;
  }

  /* Layout */
  .ai-montessori-main-{{ ns }}{
    display:grid; grid-template-columns: {{ section.settings.sidebar_width }}px 1fr; gap:40px; align-items:start;
  }
  .ai-montessori-sidebar-{{ ns }}{
    background:#FAFAFA; padding:24px; border-radius:12px; position:sticky; top:20px;
    max-height:80vh; overflow-y:auto; box-shadow:0 1px 0 rgba(0,0,0,0.03), 0 1px 3px rgba(0,0,0,0.04);
  }
  .ai-montessori-sidebar-{{ ns }}::-webkit-scrollbar { display: none; }
  .ai-montessori-sidebar-{{ ns }} { -ms-overflow-style: none; scrollbar-width: none; }

  /* Filter Groups */
  .ai-montessori-filter-group-{{ ns }} { margin-bottom: 25px; }
  .ai-montessori-filter-title-{{ ns }} {
    font-weight: 600; font-size: 16px; color: #2D3748; margin: 0 0 12px 0;
    cursor: pointer; display:flex; justify-content:space-between; align-items:center;
  }
  .ai-montessori-filter-toggle-{{ ns }} { font-size: 12px; color: #A0AEC0; transition: transform .2s ease; }
  .ai-montessori-filter-group-{{ ns }}.collapsed .ai-montessori-filter-toggle-{{ ns }} { transform: rotate(180deg); }

  .ai-montessori-filter-options-{{ ns }}{
    display:flex; flex-direction:column; gap:8px; overflow:hidden;
    transition:max-height .3s ease, opacity .3s ease; max-height: 420px;
  }
  .ai-montessori-filter-group-{{ ns }}.collapsed .ai-montessori-filter-options-{{ ns }}{ max-height:0; opacity:0; }

  .ai-montessori-filter-option-{{ ns }}{ display:flex; align-items:center; gap:8px; }
  .ai-montessori-filter-checkbox-{{ ns }}{ width:16px; height:16px; accent-color:#4C4CF1; }
  .ai-montessori-filter-label-{{ ns }}{ font-size:14px; color:#4A5568; cursor:pointer; flex-grow:1; }
  .ai-montessori-filter-count-{{ ns }}{ font-size:12px; color:#A0AEC0; margin-left:auto; }

  .ai-montessori-active-filters-{{ ns }}{ 
    display:flex; flex-wrap:wrap; gap:8px; margin-bottom:18px; padding-bottom:18px; 
    border-bottom:1px solid #E2E8F0; 
  }
  .ai-montessori-clear-all-{{ ns }}{ 
    color:#4C4CF1; text-decoration:none; font-size:12px; font-weight:600; 
  }
  .ai-montessori-active-filter-{{ ns }}{ 
    background:#E2E8F0; padding:4px 8px; border-radius:6px; display:flex; align-items:center; gap:6px;
  }
  .ai-montessori-active-filter-{{ ns }} span{ font-size:12px; color:#4A5568; }
  .ai-montessori-clear-filter-{{ ns }}{ 
    color:#9CA3AF; text-decoration:none; font-size:16px; cursor:pointer;
  }

  /* Grid & Cards */
  .ai-montessori-products-grid-{{ ns }}{
    display:grid; grid-template-columns: repeat({{ section.settings.desktop_columns }}, 1fr);
    gap: 16px;
  }
  .ai-montessori-product-card-{{ ns }}{
    background:#fff; padding:0; position:relative;
    box-shadow:0 2px 8px rgba(0,0,0,0.05); transition:transform .2s, box-shadow .2s;
    display:flex; flex-direction:column;
    z-index:1;
    overflow:hidden;
  }

  .ai-montessori-product-image-{{ ns }}{
    width:100%; height:0; padding-bottom:75%; position:relative;
    margin-bottom:0; background:#fff; overflow:hidden;
  }
  .ai-montessori-product-image-{{ ns }} img{
    position:absolute; top:0; left:0; width:100%; height:100%; object-fit:cover;
  }

  .ai-montessori-wishlist-{{ ns }}{
    position:absolute; top:12px; right:12px; width:34px; height:34px; border-radius:50%;
    background:#fff; border:1px solid #E2E8F0; cursor:pointer; color:#9CA3AF; z-index:2;
    display:grid; place-items:center; transition:color .2s, border-color .2s;
  }
  .ai-montessori-wishlist-{{ ns }}:hover,
  .ai-montessori-wishlist-{{ ns }}.active{ color:#9F34FA; border-color:#9F34FA; }

  .ai-montessori-product-title-{{ ns }}{
    font-weight:700; font-size:16px; color:#2D3748; margin:0 0 6px 0; line-height:1.3; text-decoration:none !important; display:block;
  }
  .ai-montessori-product-title-{{ ns }}:hover{ color:#4C4CF1; }

  .ai-montessori-product-sku-{{ ns }}{ font-size:12px; color:#A0AEC0; margin-bottom:8px; }

  .ai-montessori-price-row-{{ ns }}{ display:flex; align-items:baseline; gap:8px; margin-bottom:6px; }
  .ai-montessori-product-price-{{ ns }}{ font-weight:800; font-size:16px; color:#1F2937; }
  .ai-montessori-product-compare-{{ ns }}{ text-decoration:line-through; color:#A0AEC0; font-size:13px; }

  .ai-montessori-product-actions-{{ ns }}{ display:flex; justify-content:space-between; align-items:center; }

  .ai-montessori-add-to-cart-{{ ns }}{
    width:40px; height:40px; border-radius:50%; border:none; cursor:pointer;
    background:#4C4CF1; color:#fff; font-size:20px; font-weight:800;
    display:flex; align-items:center; justify-content:center;
    transition:transform .1s, background-color .15s, box-shadow .15s;
    box-shadow:0 6px 18px rgba(76,76,241,0.25);
  }
  .ai-montessori-add-to-cart-{{ ns }}:hover{ transform:scale(1.05); background:#3F3FE3; }

  /* Loading spinner animation */
  @keyframes spin-{{ ns }} {
    to { transform: rotate(360deg); }
  }

  /* Pagination - Infinite Scroll States */
  .ai-scroll-container-{{ ns }} {
    width: 100%;
    text-align: center;
    padding: 30px 0;
  }

  .ai-loading-{{ ns }} {
    display: none;
    width: 40px;
    height: 40px;
    border: 4px solid #E2E8F0;
    border-top-color: #4C4CF1;
    border-radius: 50%;
    animation: spin-{{ ns }} 1s linear infinite;
    margin: 0 auto;
  }
  .ai-loading-{{ ns }}.active { display: block; }

  .ai-load-more-{{ ns }} {
    display: none;
    padding: 12px 32px;
    background: #4C4CF1;
    color: #fff;
    border: none;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s;
  }
  .ai-load-more-{{ ns }}:hover {
    background: #3F3FE3;
    transform: translateY(-1px);
  }
  .ai-load-more-{{ ns }}.active { display: inline-block; }

  .ai-error-{{ ns }} {
    display: none;
    color: #E53E3E;
    font-size: 14px;
  }
  .ai-error-{{ ns }}.active { display: block; }
  .ai-error-{{ ns }} button {
    margin-top: 12px;
    padding: 8px 20px;
    background: #4C4CF1;
    color: #fff;
    border: none;
    border-radius: 6px;
    cursor: pointer;
  }

  .ai-end-{{ ns }} {
    display: none;
    color: #A0AEC0;
    font-size: 14px;
  }
  .ai-end-{{ ns }}.active { display: block; }

  /* Hide default pagination */
  .pagination { display: none !important; }

  /* Responsive */
  @media (max-width:1024px){
    .ai-montessori-main-{{ ns }}{ grid-template-columns:280px 1fr; gap:28px; }
    .ai-montessori-products-grid-{{ ns }}{ grid-template-columns:repeat({{ section.settings.tablet_columns }}, 1fr); }
  }
  /* Shop by Collection styles for mobile collapse */
  .ai-collection-nav-{{ ns }} {
    margin-bottom: 0;
    padding-bottom: 0;
    border-bottom: none;
  }
  .ai-collection-nav-header-{{ ns }} {
    font-size: 14px;
    font-weight: 600;
    color: #2D3748;
    margin-bottom: 12px;
    cursor: pointer;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  .ai-collection-nav-toggle-{{ ns }} {
    font-size: 12px;
    color: #A0AEC0;
    transition: transform .2s ease;
  }
  .ai-collection-nav-{{ ns }}.collapsed .ai-collection-nav-toggle-{{ ns }} {
    transform: rotate(180deg);
  }
  .ai-collection-nav-content-{{ ns }} {
    display: flex;
    flex-direction: column;
    gap: 2px;
    transition: max-height .3s ease, opacity .3s ease;
    overflow: hidden;
    max-height: 500px;
    padding-bottom: 0; /* No extra padding at bottom */
  }
  .ai-collection-nav-{{ ns }}.collapsed .ai-collection-nav-content-{{ ns }} {
    max-height: 0;
    opacity: 0;
  }
  
  /* Active collection link styles */
  .ai-collection-nav-content-{{ ns }} a {
    font-size: 14px;
    color: #4A5568;
    text-decoration: none;
    padding: 4px 0;
    display: flex;
    justify-content: space-between;
    align-items: center;
    transition: color .2s;
    line-height: 1.3;
  }
  .ai-collection-nav-content-{{ ns }} a:hover {
    color: #4C4CF1;
  }
  .ai-collection-nav-content-{{ ns }} a.active {
    color: #4C4CF1;
    font-weight: 600;
  }

  @media (max-width:768px){
    .ai-montessori-collection-{{ ns }} { padding: 15px 15px 40px 15px; }
    .ai-montessori-main-{{ ns }}{ grid-template-columns:1fr; gap:20px; }
    .ai-montessori-sidebar-{{ ns }}{ position:static; max-height:none; }
    .ai-montessori-products-grid-{{ ns }}{ grid-template-columns:repeat(2, 1fr); }
    .ai-montessori-header-{{ ns }}{ flex-direction:column; align-items:flex-start; }
    .ai-montessori-filter-group-{{ ns }} { margin-bottom: 20px; }
    .ai-montessori-filter-group-{{ ns }}.collapsed .ai-montessori-filter-options-{{ ns }} { max-height:0; opacity:0; }
    .ai-montessori-filter-group-{{ ns }} .ai-montessori-filter-options-{{ ns }} { max-height: 300px; }
    .ai-montessori-filter-group-{{ ns }} { margin-bottom: 15px; }
  }
{% endstyle %}

<section class="ai-montessori-collection-{{ ns }}">
  {% if section.settings.show_breadcrumb %}
    <nav class="ai-montessori-breadcrumb-{{ ns }}">
      <a href="{{ routes.root_url }}">Home</a> › <span>{{ collection.title | default: section.settings.page_title }}</span>
    </nav>
  {% endif %}

  <div class="ai-montessori-header-{{ ns }}">
    <div class="ai-montessori-title-section-{{ ns }}">
      {% assign has_active_filters = false %}
      {% assign active_age_range = '' %}
      {% assign active_non_age_filters = '' | split: '' %}
      
      {% if collection.filters != empty %}
        {% for filter in collection.filters %}
          {% if filter.active_values.size > 0 %}
            {% assign has_active_filters = true %}
            {% for value in filter.active_values %}
              {% if value.label contains 'Plane: ' %}
                {% assign clean_label = value.label | remove: 'Plane: ' %}
                {% if active_age_range == '' %}
                  {% assign active_age_range = clean_label %}
                {% else %}
                  {% assign active_age_range = active_age_range | append: ', ' | append: clean_label %}
                {% endif %}
              {% else %}
                {% assign clean_label = value.label %}
                {% if clean_label contains 'Collection: ' %}
                  {% assign clean_label = clean_label | remove: 'Collection: ' %}
                {% elsif clean_label contains 'Curriculum: ' %}
                  {% assign clean_label = clean_label | remove: 'Curriculum: ' %}
                {% endif %}
                {% assign active_non_age_filters = active_non_age_filters | push: clean_label %}
              {% endif %}
            {% endfor %}
          {% endif %}
        {% endfor %}
      {% endif %}
      
      <h1>
        {% if has_active_filters %}
          {% comment %} Show collection name first, then age range if exists {% endcomment %}
          {{ collection.title }}
          {% if active_age_range != '' %}
             - {{ active_age_range }}
          {% endif %}
        {% else %}
          {{ collection.title }}
        {% endif %}
      </h1>
      
      <span id="product-count-{{ ns }}" style="font-size:14px; color:#6B7280; margin-top:8px; display:block;">
        Showing <span id="showing-count-{{ ns }}">{{ collection.products_count }}</span> products
      </span>
    </div>

    {% assign current_sort = collection.sort_by | default: collection.default_sort_by %}
    <select class="ai-montessori-sort-dropdown-{{ ns }}" id="ai-sort-select-{{ ns }}">
      {% for option in collection.sort_options %}
        <option value="{{ option.value }}" {% if option.value == current_sort %}selected{% endif %}>{{ option.name }}</option>
      {% endfor %}
    </select>
  </div>

  <div class="ai-montessori-main-{{ ns }}">
    <aside class="ai-montessori-sidebar-{{ ns }}">
      {% comment %} Age Filter Form - Opens at top {% endcomment %}
      <form id="ai-filters-form-{{ ns }}" method="get" action="{{ collection.url }}">
        {% comment %} Age Range Filter - Inside form {% endcomment %}
        <div class="ai-montessori-filter-group-{{ ns }}" data-filter-group="age-range" style="margin-bottom: 25px;">
          <h3 class="ai-montessori-filter-title-{{ ns }}">
            Filter by Age groups
            <span class="ai-montessori-filter-toggle-{{ ns }}">▼</span>
          </h3>

          <div class="ai-montessori-filter-options-{{ ns }}">
            {% assign found_plane_values = false %}
            {% for filter in collection.filters %}
              {% if filter.type == 'list' %}
                {% for value in filter.values %}
                  {% if value.label contains 'Plane:' %}
                    {% assign found_plane_values = true %}
                    <label class="ai-montessori-filter-option-{{ ns }}">
                      <input
                        type="checkbox"
                        class="ai-montessori-filter-checkbox-{{ ns }}"
                        name="{{ value.param_name }}"
                        value="{{ value.value }}"
                        {% if value.active %}checked{% endif %}
                        onchange="this.form.submit()"
                      >
                      <span class="ai-montessori-filter-label-{{ ns }}">
                        {{ value.label | remove: 'Plane: ' }}
                      </span>
                      <span class="ai-montessori-filter-count-{{ ns }}">({{ value.count }})</span>
                    </label>
                  {% endif %}
                {% endfor %}
              {% endif %}
            {% endfor %}
            
            {% unless found_plane_values %}
              <p style="font-size:12px; color:#A0AEC0; padding:8px 0;">
                No age filters found. Make sure products are tagged with "Plane: 0 to 3", "Plane: 3 to 6", "Plane: 6 to 12"
              </p>
            {% endunless %}
          </div>
        </div>
        
        {% if collection.filters.size > 0 %}
          {% assign any_active = false %}
          {% for f in collection.filters %}
            {% if f.type == 'list' and f.active_values.size > 0 %}
              {% assign any_active = true %}
            {% endif %}
          {% endfor %}

          {% if any_active %}
            <div class="ai-montessori-active-filters-{{ ns }}">
              <a href="{{ collection.url }}" class="ai-montessori-clear-all-{{ ns }}">Clear all</a>
              {% for f in collection.filters %}
                {% if f.type == 'list' %}
                  {% for v in f.active_values %}
                    <div class="ai-montessori-active-filter-{{ ns }}">
                      <span>
                        {% assign label = v.label %}
                        {% if label contains 'Collection: ' %}
                          {{ label | remove: 'Collection: ' }}
                        {% elsif label contains 'Curriculum: ' %}
                          {{ label | remove: 'Curriculum: ' }}
                        {% else %}
                          {{ label }}
                        {% endif %}
                      </span>
                      <a href="{{ v.url_to_remove }}" class="ai-montessori-clear-filter-{{ ns }}">×</a>
                    </div>
                  {% endfor %}
                {% endif %}
              {% endfor %}
            </div>
          {% endif %}
        {% endif %}

        {% comment %} Render all filter groups {% endcomment %}
        {% for filter in collection.filters %}
          {% unless filter.label == 'Price' or filter.label == 'Test' or filter.label contains 'Plane' %}
            <div class="ai-montessori-filter-group-{{ ns }}" data-filter-group="{{ filter.label | handleize }}">
              <h3 class="ai-montessori-filter-title-{{ ns }}">
                {{ filter.label }}
                <span class="ai-montessori-filter-toggle-{{ ns }}">▼</span>
              </h3>

              <div class="ai-montessori-filter-options-{{ ns }}">
                {% case filter.type %}
                  {% when 'list' %}
                    {% for value in filter.values %}
                      {% unless value.label contains 'Plane:' %}
                        {% if value.count > 0 or value.active %}
                          <label class="ai-montessori-filter-option-{{ ns }}">
                            <input
                              type="checkbox"
                              class="ai-montessori-filter-checkbox-{{ ns }}"
                              name="{{ value.param_name }}"
                              value="{{ value.value }}"
                              {% if value.active %}checked{% endif %}
                              onchange="this.form.submit()"
                            >
                            <span class="ai-montessori-filter-label-{{ ns }}">
                              {% assign label = value.label %}
                              {% if label contains 'Collection: ' %}
                                {{ label | remove: 'Collection: ' }}
                              {% elsif label contains 'Curriculum: ' %}
                                {{ label | remove: 'Curriculum: ' }}
                              {% else %}
                                {{ label }}
                              {% endif %}
                            </span>
                            <span class="ai-montessori-filter-count-{{ ns }}">({{ value.count }})</span>
                          </label>
                        {% endif %}
                      {% endunless %}
                    {% endfor %}
                  {% when 'price_range' %}
                    <div style="display:flex; gap:10px; align-items:center; flex-wrap:wrap;">
                      <div>
                        <label style="font-size:12px; color:#6B7280;">Min</label>
                        <input
                          name="{{ filter.min_value.param_name }}"
                          type="number"
                          min="0"
                          {% if filter.min_value.value %}value="{{ filter.min_value.value | money_without_currency | replace: ',', '' }}"{% endif %}
                          style="width:100px; padding:6px 8px; border:1px solid #E2E8F0; border-radius:6px;"
                        >
                      </div>
                      <div>
                        <label style="font-size:12px; color:#6B7280;">Max</label>
                        <input
                          name="{{ filter.max_value.param_name }}"
                          type="number"
                          min="0"
                          {% if filter.max_value.value %}value="{{ filter.max_value.value | money_without_currency | replace: ',', '' }}"{% endif %}
                          style="width:100px; padding:6px 8px; border:1px solid #E2E8F0; border-radius:6px;"
                        >
                      </div>
                      <button type="submit" style="padding:8px 12px; border:0; border-radius:6px; background:#4C4CF1; color:#fff; cursor:pointer; align-self:flex-end;">Apply</button>
                    </div>
                  {% when 'boolean' %}
                    {% for value in filter.values %}
                      <label class="ai-montessori-filter-option-{{ ns }}">
                        <input
                          type="checkbox"
                          class="ai-montessori-filter-checkbox-{{ ns }}"
                          name="{{ value.param_name }}"
                          value="true"
                          {% if value.active %}checked{% endif %}
                          onchange="this.form.submit()"
                        >
                        <span class="ai-montessori-filter-label-{{ ns }}">{{ value.label }}</span>
                      </label>
                    {% endfor %}
                {% endcase %}
              </div>
            </div>
          {% endunless %}
        {% endfor %}
      </form>

      {% comment %} All Collections Navigation {% endcomment %}
      <div class="ai-collection-nav-{{ ns }}" data-collection-nav>
        <h3 class="ai-collection-nav-header-{{ ns }}">
          Shop by Collection
          <span class="ai-collection-nav-toggle-{{ ns }}">▼</span>
        </h3>
        <div class="ai-collection-nav-content-{{ ns }}">
          {% comment %} Assortment Group {% endcomment %}
          <div style="margin-bottom: 12px;">
            <div style="font-size: 12px; font-weight: 600; color: #6B7280; text-transform: uppercase; letter-spacing: 0.5px; margin-bottom: 6px;">
              Assortment
            </div>
            
            {% assign assortment_collections = 'all-products,practical-life,sensorial,language,mathematics,cultural-studies,creative-arts,movement,furniture,curriculum-support,accessories-replacement-parts' | split: ',' %}
            
            {% for handle in assortment_collections %}
              {% assign col = collections[handle] %}
              {% if col and col.all_products_count > 0 %}
                {% if collection.handle == col.handle %}
                  <a href="{{ col.url }}" class="active">
                    <span>{{ col.title }}</span>
                    <span style="font-size: 12px; color: #A0AEC0;">({{ col.all_products_count }})</span>
                  </a>
                {% else %}
                  <a href="{{ col.url }}">
                    <span>{{ col.title }}</span>
                    <span style="font-size: 12px; color: #A0AEC0;">({{ col.all_products_count }})</span>
                  </a>
                {% endif %}
              {% endif %}
            {% endfor %}
          </div>
          
          {% comment %} Age Groups {% endcomment %}
          {% assign age_collections_handles = '0-3-years,3-6-years,6-12-years' | split: ',' %}
          {% assign has_age_collections = false %}
          
          {% for handle in age_collections_handles %}
            {% assign col = collections[handle] %}
            {% if col and col.all_products_count > 0 %}
              {% assign has_age_collections = true %}
              {% break %}
            {% endif %}
          {% endfor %}
          
          {% if has_age_collections %}
            <div style="margin-bottom: 12px;">
              <div style="font-size: 12px; font-weight: 600; color: #6B7280; text-transform: uppercase; letter-spacing: 0.5px; margin-bottom: 6px; margin-top: 16px;">
                Age Groups
              </div>
              
              {% for handle in age_collections_handles %}
                {% assign col = collections[handle] %}
                {% if col %}
                  {% if collection.handle == col.handle %}
                    <a href="{{ col.url }}" class="active">
                      <span>{{ col.title }}</span>
                      <span style="font-size: 12px; color: #A0AEC0;">({{ col.all_products_count }})</span>
                    </a>
                  {% else %}
                    <a href="{{ col.url }}">
                      <span>{{ col.title }}</span>
                      <span style="font-size: 12px; color: #A0AEC0;">({{ col.all_products_count }})</span>
                    </a>
                  {% endif %}
                {% endif %}
              {% endfor %}
            </div>
          {% endif %}
          
          {% comment %} Books & More (standalone) {% endcomment %}
          {% assign books_col = collections['books-more'] %}
          {% if books_col and books_col.all_products_count > 0 %}
            <div style="margin-top: 16px;">
              {% if collection.handle == 'books-more' %}
                <a href="{{ books_col.url }}" class="active">
                  <span>{{ books_col.title }}</span>
                  <span style="font-size: 12px; color: #A0AEC0;">({{ books_col.all_products_count }})</span>
                </a>
              {% else %}
                <a href="{{ books_col.url }}">
                  <span>{{ books_col.title }}</span>
                  <span style="font-size: 12px; color: #A0AEC0;">({{ books_col.all_products_count }})</span>
                </a>
              {% endif %}
            </div>
          {% endif %}
        </div>
      </div>
    </aside>

    <main>
      <div class="ai-montessori-products-grid-{{ ns }}" id="ai-products-grid-{{ ns }}">
      {% paginate collection.products by section.settings.products_per_page %}
        {% for product in collection.products %}
          <article 
            class="ai-montessori-product-card-{{ ns }}" 
            data-product-id="{{ product.id }}">
            <button class="ai-montessori-wishlist-{{ ns }}" aria-label="Add to wishlist">♡</button>

            <div class="ai-montessori-product-image-{{ ns }}">
              {% if product.featured_image %}
                <img src="{{ product.featured_image | image_url: width: 640 }}"
                     alt="{{ product.featured_image.alt | escape }}"
                     loading="lazy">
              {% endif %}
            </div>
            
            <div style="padding: 8px 12px; display:flex; flex-direction:column; flex-grow:1;">
              <a href="{{ product.url }}" class="ai-montessori-product-title-{{ ns }}">
                {{ product.title }}
              </a>

              {% if product.variants.first.sku %}
                <div class="ai-montessori-product-sku-{{ ns }}">SKU: {{ product.variants.first.sku }}</div>
              {% endif %}

              <div class="ai-montessori-price-row-{{ ns }}" style="margin-top:auto;">
                {% if product.compare_at_price > product.price %}
                  <span class="ai-montessori-product-compare-{{ ns }}">{{ product.compare_at_price | money }}</span>
                {% endif %}
                <span class="ai-montessori-product-price-{{ ns }}">{{ product.price | money }}</span>
              </div>

              <div class="ai-montessori-product-actions-{{ ns }}" style="margin-top:auto;">
                <button class="ai-montessori-add-to-cart-{{ ns }}"
                        data-variant-id="{{ product.selected_or_first_available_variant.id }}"
                        aria-label="Add {{ product.title | escape }} to cart">+</button>
              </div>
            </div>
          </article>
        {% endfor %}

        {% comment %} Hidden data for pagination {% endcomment %}
        {% if paginate.next %}
          <div id="next-url-{{ ns }}" data-url="{{ paginate.next.url }}" style="display:none;"></div>
        {% endif %}
        <div id="page-info-{{ ns }}" 
             data-current="{{ paginate.current_page }}" 
             data-total="{{ paginate.pages }}" 
             style="display:none;"></div>
      {% endpaginate %}
      </div>

      {% comment %} Infinite scroll container - Outside grid {% endcomment %}
      <div class="ai-scroll-container-{{ ns }}" id="scroll-container-{{ ns }}">
        <div class="ai-loading-{{ ns }}" id="loading-{{ ns }}"></div>
        <button class="ai-load-more-{{ ns }}" id="load-more-{{ ns }}">Load More Products</button>
        <div class="ai-error-{{ ns }}" id="error-{{ ns }}">
          <p>Failed to load more products</p>
          <button id="retry-{{ ns }}">Retry</button>
        </div>
        <div class="ai-end-{{ ns }}" id="end-{{ ns }}">You've reached the end</div>
      </div>
    </main>
  </div>
</section>

<script>
(function(){
  const ns = "{{ ns }}";
  
  console.log('🚀 Initializing Montessori Collection:', ns);
  
  document.addEventListener('DOMContentLoaded', ()=>{
    const root = document.querySelector('.ai-montessori-collection-' + ns);
    if(!root) {
      console.error('❌ Root element not found');
      return;
    }

    console.log('✅ Root element found');

    // Mobile collapse
    function checkMobileCollapse() {
      if (window.innerWidth <= 768) {
        // Collapse filter groups
        root.querySelectorAll('.ai-montessori-filter-group-' + ns).forEach(group=>{
          group.classList.add('collapsed');
        });
        // Collapse Shop by Collection
        const collectionNav = root.querySelector('.ai-collection-nav-' + ns);
        if (collectionNav) {
          collectionNav.classList.add('collapsed');
        }
      } else {
        // Expand all on desktop
        root.querySelectorAll('.ai-montessori-filter-group-' + ns).forEach(group=>{
          group.classList.remove('collapsed');
        });
        const collectionNav = root.querySelector('.ai-collection-nav-' + ns);
        if (collectionNav) {
          collectionNav.classList.remove('collapsed');
        }
      }
    }
    checkMobileCollapse();
    window.addEventListener('resize', checkMobileCollapse);

    // Filter toggle
    root.querySelectorAll('.ai-montessori-filter-title-' + ns).forEach(title=>{
      title.addEventListener('click', ()=>{
        title.closest('.ai-montessori-filter-group-' + ns).classList.toggle('collapsed');
      });
    });

    // Shop by Collection toggle
    const collectionNavHeader = root.querySelector('.ai-collection-nav-header-' + ns);
    if (collectionNavHeader) {
      collectionNavHeader.addEventListener('click', ()=>{
        const collectionNav = root.querySelector('.ai-collection-nav-' + ns);
        if (collectionNav) {
          collectionNav.classList.toggle('collapsed');
        }
      });
    }

    // Sort dropdown
    const sortSelect = root.querySelector('#ai-sort-select-' + ns);
    if (sortSelect) {
      sortSelect.addEventListener('change', (e)=>{
        const url = new URL(window.location.href);
        url.searchParams.set('sort_by', e.target.value);
        window.location = url.toString();
      });
    }

    // Attach cart/wishlist handlers
    function attachHandlers(container) {
      container.querySelectorAll('.ai-montessori-add-to-cart-' + ns).forEach(btn=>{
        if(!btn.dataset.hasListener) {
          btn.dataset.hasListener = 'true';
          btn.addEventListener('click', (e)=>{
            e.preventDefault();
            const variantId = btn.dataset.variantId;
            if(!variantId) return;
            fetch('/cart/add.js', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ items: [{ id: variantId, quantity: 1 }] })
            })
            .then(r=>r.json())
            .then(()=>{
              btn.textContent = '✓';
              btn.style.backgroundColor = '#2fb36d';
              setTimeout(()=>{ btn.textContent='+'; btn.style.backgroundColor='#4C4CF1'; }, 1200);
            })
            .catch(console.error);
          });
        }
      });
      
      container.querySelectorAll('.ai-montessori-wishlist-' + ns).forEach(btn=>{
        if(!btn.dataset.hasListener) {
          btn.dataset.hasListener = 'true';
          btn.addEventListener('click', (e)=>{
            e.preventDefault();
            btn.classList.toggle('active');
            btn.textContent = btn.classList.contains('active') ? '♥' : '♡';
          });
        }
      });
    }
    
    attachHandlers(root);

    // ===== INFINITE SCROLL =====
    const elements = {
      grid: document.getElementById('ai-products-grid-' + ns),
      loading: document.getElementById('loading-' + ns),
      loadMore: document.getElementById('load-more-' + ns),
      error: document.getElementById('error-' + ns),
      retry: document.getElementById('retry-' + ns),
      end: document.getElementById('end-' + ns),
      nextUrl: document.getElementById('next-url-' + ns),
      pageInfo: document.getElementById('page-info-' + ns),
      count: document.getElementById('showing-count-' + ns)
    };

    console.log('📊 Elements:', {
      grid: !!elements.grid,
      loading: !!elements.loading,
      loadMore: !!elements.loadMore,
      nextUrl: !!elements.nextUrl,
      hasNextUrl: elements.nextUrl ? elements.nextUrl.dataset.url : 'none'
    });

    if (!elements.nextUrl || !elements.nextUrl.dataset.url) {
      console.log('ℹ️ No more pages available');
      if (elements.end) elements.end.classList.add('active');
      return;
    }

    let state = {
      isLoading: false,
      nextUrl: elements.nextUrl.dataset.url,
      page: parseInt(elements.pageInfo?.dataset.current || '1'),
      totalPages: parseInt(elements.pageInfo?.dataset.total || '1'),
      productCount: document.querySelectorAll('.ai-montessori-product-card-' + ns).length
    };

    console.log('📄 Initial state:', state);

    function loadMore() {
      if (state.isLoading || !state.nextUrl) {
        console.log('⏸️ Cannot load:', { isLoading: state.isLoading, hasUrl: !!state.nextUrl });
        return;
      }

      console.log('📥 Loading page', state.page + 1);

      state.isLoading = true;
      elements.loading?.classList.add('active');
      elements.loadMore?.classList.remove('active');
      elements.error?.classList.remove('active');

      fetch(state.nextUrl)
        .then(r => {
          if (!r.ok) throw new Error('HTTP ' + r.status);
          return r.text();
        })
        .then(html => {
          const parser = new DOMParser();
          const doc = parser.parseFromString(html, 'text/html');
          const newGrid = doc.getElementById('ai-products-grid-' + ns);
          
          if (!newGrid) throw new Error('Grid not found');
          
          const newProducts = newGrid.querySelectorAll('.ai-montessori-product-card-' + ns);
          console.log('✅ Found', newProducts.length, 'products');
          
          if (newProducts.length === 0) {
            state.nextUrl = null;
            elements.end?.classList.add('active');
            return;
          }

          newProducts.forEach(p => elements.grid.appendChild(p.cloneNode(true)));
          attachHandlers(elements.grid);
          
          state.productCount += newProducts.length;
          state.page++;
          if (elements.count) elements.count.textContent = state.productCount;

          const newNextUrl = doc.getElementById('next-url-' + ns);
          if (newNextUrl && newNextUrl.dataset.url) {
            state.nextUrl = newNextUrl.dataset.url;
            // Switch to button after 2 auto-loads
            if (state.page >= 2) {
              elements.loadMore?.classList.add('active');
            }
          } else {
            state.nextUrl = null;
            elements.end?.classList.add('active');
          }

          console.log('📊 Updated state:', state);
        })
        .catch(err => {
          console.error('❌ Load error:', err);
          elements.error?.classList.add('active');
        })
        .finally(() => {
          state.isLoading = false;
          elements.loading?.classList.remove('active');
        });
    }

    // Button handler
    if (elements.loadMore) {
      elements.loadMore.addEventListener('click', loadMore);
    }

    if (elements.retry) {
      elements.retry.addEventListener('click', loadMore);
    }

    // Intersection Observer (first 2 pages)
    if ('IntersectionObserver' in window && elements.loading) {
      const observer = new IntersectionObserver((entries) => {
        if (entries[0].isIntersecting && state.page < 2) {
          console.log('👀 Scroll trigger at page', state.page);
          loadMore();
        }
      }, { rootMargin: '500px' });
      
      observer.observe(elements.loading.parentElement);
      console.log('👁️ Observer attached');
    }
  });
})();
</script>

{% schema %}
{
  "name": "Montessori Collection",
  "settings": [
    { "type": "text", "id": "page_title", "label": "Page title", "default": "All Products" },
    { "type": "checkbox", "id": "show_breadcrumb", "label": "Show breadcrumb", "default": true },
    { "type": "range", "id": "products_per_page", "min": 12, "max": 100, "step": 4, "label": "Products per page", "default": 24 },
    { "type": "range", "id": "sidebar_width", "min": 200, "max": 400, "step": 20, "unit": "px", "label": "Sidebar width", "default": 320 },
    { "type": "range", "id": "desktop_columns", "min": 2, "max": 6, "step": 1, "label": "Desktop columns", "default": 4 },
    { "type": "range", "id": "tablet_columns", "min": 1, "max": 4, "step": 1, "label": "Tablet columns", "default": 2 },
    { "type": "select", "id": "mobile_columns", "label": "Mobile columns", "options": [{ "value": "1", "label": "1" }, { "value": "2", "label": "2" }], "default": "1" },
    { "type": "range", "id": "title_size", "min": 24, "max": 48, "step": 2, "unit": "px", "label": "Page title size", "default": 32 }
  ],
  "presets": [{ "name": "Montessori Collection" }]
}
{% endschema %}
